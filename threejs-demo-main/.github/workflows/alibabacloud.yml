# This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Deploy docker image
#

name: Build and Deploy to ACK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: cn-chengdu
  REGISTRY: registry.cn-chengdu.aliyuncs.com
  NAMESPACE: stevenfeng-prod
  IMAGE: threejs-demo
  TAG: latest

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - run: npm install
    - run: npm run build

    # Login to ACR
    - name: Login to ACR with the AccessKey pair
      uses: aliyun/acr-login@v1
      with:
        login-server: https://registry.cn-chengdu.aliyuncs.com
        region-id: "${{ env.REGION_ID }}"
        username: "${{ secrets.ACR_USERNAME }}"
        password: "${{ secrets.ACR_PASSWORD }}"

    # Buid and push image to ACR
    - name: Build and push image to ACR
      run: |
        docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .
        docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"

    # Deploy docker image
    - name: Deploy docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }} 
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          docker stop threejs-demo
          docker rm threejs-demo
          docker rmi registry.cn-chengdu.aliyuncs.com/stevenfeng-prod/threejs-demo:latest
          docker pull registry.cn-chengdu.aliyuncs.com/stevenfeng-prod/threejs-demo:latest
          docker run -p 8083:80 -d --name threejs-demo registry.cn-chengdu.aliyuncs.com/stevenfeng-prod/threejs-demo:latest